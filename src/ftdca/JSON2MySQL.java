/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ftdca;

import java.io.*;
import java.sql.*;
import java.text.*;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.json.simple.*;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author Mehedi Hasan
 */
public class JSON2MySQL extends javax.swing.JFrame {
    
    private int i = 1;
    private DefaultTableModel row;
    private boolean IsTableLoaded = false;
    private JSONObject obj;
    private JSONParser parser;
    private JSONArray list;
    private String TableName;

    //for database
    Connection cn=null;
    Statement stmt=null;
    ResultSet res=null;
    String driver="com.mysql.jdbc.Driver";
    String url="jdbc:mysql://localhost:3306/ftdca";
    
    /**
     * Creates new form JSON2MySQL
     */
    public JSON2MySQL() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ChooseFile = new javax.swing.JButton();
        BackToMenuButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        ClearTableButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        QueryField = new javax.swing.JTextField();
        ExecuteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(3840, 2160));
        setMinimumSize(new java.awt.Dimension(1200, 700));
        setPreferredSize(new java.awt.Dimension(1200, 700));

        jLabel1.setFont(new java.awt.Font("Lucida Calligraphy", 0, 14)); // NOI18N
        jLabel1.setText("Load JSON");

        ChooseFile.setFont(new java.awt.Font("Lucida Calligraphy", 0, 14)); // NOI18N
        ChooseFile.setText("Choose");
        ChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseFileActionPerformed(evt);
            }
        });

        BackToMenuButton.setFont(new java.awt.Font("Lucida Calligraphy", 0, 14)); // NOI18N
        BackToMenuButton.setText("Back To Menu");
        BackToMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuButtonActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Lucida Calligraphy", 0, 14)); // NOI18N
        SaveButton.setText("Save as JSON");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Posts", "Date", "PostId"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(Table);
        Table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setPreferredWidth(35);
            Table.getColumnModel().getColumn(1).setPreferredWidth(1040);
            Table.getColumnModel().getColumn(2).setPreferredWidth(75);
            Table.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        ClearTableButton.setFont(new java.awt.Font("Lucida Calligraphy", 0, 14)); // NOI18N
        ClearTableButton.setText("Clear Table");
        ClearTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearTableButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Calligraphy", 0, 14)); // NOI18N
        jLabel2.setText("Enter Query");

        ExecuteButton.setFont(new java.awt.Font("Lucida Calligraphy", 0, 14)); // NOI18N
        ExecuteButton.setText("Execute");
        ExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(QueryField, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ChooseFile)
                        .addGap(166, 166, 166)
                        .addComponent(ClearTableButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BackToMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(148, 148, 148)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ExecuteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackToMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExecuteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(QueryField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackToMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuButtonActionPerformed
        Menu menu = new Menu();
        this.setVisible(false);
        menu.setVisible(true);
    }//GEN-LAST:event_BackToMenuButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        if(IsTableLoaded){
            Date date = new Date();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");
            obj = new JSONObject();
            list = new JSONArray();
            int r = row.getRowCount();
            for(int m = 0; m < r; m++){
                if(row.getValueAt(m, 1)!= null){
                    list.add(row.getValueAt(m, 1)); //always ignore 1st column which contains id
                    list.add(row.getValueAt(m, 2));
                    list.add(row.getValueAt(m, 3));
                }
            }
            obj.put("data", list);
            FileWriter file = null;
            try {
                file = new FileWriter("files\\"+simpleDateFormat.format(date)+".json");
                file.write(obj.toJSONString());
                file.flush();
                JOptionPane.showMessageDialog(null, "Saved file.");
            } catch (IOException ex) {
                Logger.getLogger(PreProcess.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No data on Table!");
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void ChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        row = (DefaultTableModel)Table.getModel(); 
        parser = new JSONParser();
        String post,date, tableName = f.getName().replace(".json", ""), id;
        try {
            Object obj = parser.parse(new FileReader(f));
            IsTableLoaded = true;
            TableName = tableName;
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray msg = (JSONArray) jsonObject.get("data");
            Iterator<String> iterator = msg.iterator();
            while (iterator.hasNext()) {
                post = iterator.next();
                date = iterator.next();
                id = iterator.next();
                row.addRow(new Object[]{i++, post, date, id});
                if(post != null && !post.isEmpty() && !date.isEmpty()){
                    AddIntoMySQL(tableName, post, date, id); //adding into mysql
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (org.json.simple.parser.ParseException ex) {
            Logger.getLogger(PreProcess.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ChooseFileActionPerformed

    private void ClearTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearTableButtonActionPerformed
        if(IsTableLoaded){
            try{
                while(row.getRowCount() != 0){
                    row.removeRow(row.getRowCount() - 1);
                }
                i = 1;
                IsTableLoaded = false;
                
                //creating a connection
                cn = DriverManager.getConnection(url,"root","");         
                //create statement
                stmt=cn.createStatement();
                String DeleteTable = "DROP TABLE `"+TableName+"`";
                stmt.execute(DeleteTable);
            } catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_ClearTableButtonActionPerformed

    private void ExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteButtonActionPerformed
        String query = QueryField.getText();
        if(query.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Insert a Query!");
        } else {
            try{
                //creating a connection
                cn = DriverManager.getConnection(url,"root","");         
                //create statement
                stmt=cn.createStatement(); 
                ResultSet rs = stmt.executeQuery(query);
                //clear table
                while(row.getRowCount() != 0){
                    row.removeRow(row.getRowCount() - 1);
                }
                i = 1;
                //table cleared

                //entering new data from sql result
                while(rs.next()){
                    int j = rs.getInt("ID");
                    String post = rs.getString("Posts");
                    String date = rs.getDate("Date").toString();
                    String postId = rs.getString("PostId");
                    row.addRow(new Object[]{j, post, date, postId});
                }
                IsTableLoaded = true;
            } catch(Exception ex) {
                    ex.printStackTrace();
            }
        }    
    }//GEN-LAST:event_ExecuteButtonActionPerformed

    public void AddIntoMySQL(String TableName, String Post, String d, String PostId){
         //trying to register into database
            try{
                //creating a connection
                cn = DriverManager.getConnection(url,"root","");         
                //create statement
                stmt=cn.createStatement();                               
                
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                Date d1 = df.parse(d);
             
                String TableStructure = "CREATE TABLE IF NOT EXISTS `"+TableName+"` (  `ID` int(10) NOT NULL AUTO_INCREMENT,  `Posts` text NOT NULL, `Date` date NOT NULL, `PostId` varchar(100) NOT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;";
                String query = "INSERT INTO `ftdca`.`"+TableName+"` (`ID`, `Posts`, `Date`, `PostId`) VALUES (null, '"+Post.replace("'", "\"")+"', '"+df.format(d1)+"', '"+PostId+"')";
                
                if(stmt.execute(TableStructure) == false){
                    stmt.execute(query);
                } else {
                    JOptionPane.showMessageDialog(null, "Error occured while creating table "+TableName);
                }
            } catch(Exception ex) {
                ex.printStackTrace();
            }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToMenuButton;
    private javax.swing.JButton ChooseFile;
    private javax.swing.JButton ClearTableButton;
    private javax.swing.JButton ExecuteButton;
    private javax.swing.JTextField QueryField;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTable Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
